

RefWorks:160
@article{Beck1999,
        author={Beck,K.},
        year={1999},
        title={Embracing change with extreme programming},
        journal={Computer},
        volume={32},
        number={10},
        pages={70-77},
        abstract={Traditional software engineering means have been characterized by a rather predictable process in the past. Users tell once and for all exactly what they want. Programmers design the system that will deliver those features. They code it; test it, and all is well. But all was not always well. The users did not tell once and for all exactly what they wanted. They changed their minds, and the users were not the only problem. Programmers could misjudge their progress. The academic software engineering community took the high cost of changing software as a challenge, creating technologies like relational databases, modular programming, and information hiding. This is where extreme programming comes in. Rather than planning, analyzing, and designing for the far-flung future, XP exploits the reduction in the cost of changing software to do all of these activities a little at a time, throughout software development. The paper discusses the major practices of XP},
        keywords={software engineering; cost; extreme programming; planning},
        isbn={0018-9162},
}

RefWorks:157
@article{Boehm2002,
        author={Boehm,B.},
        year={2002},
        title={Get ready for agile methods, with care},
        journal={Computer},
        volume={35},
        number={1},
        pages={64-69},
        abstract={Although many of their advocates consider the agile and plan-driven software development methods polar opposites, synthesizing the two can provide developers with a comprehensive spectrum of tools and options. Real-world examples argue for and against agile methods. Responding to change has been cited as the critical technical success factor in the Internet browser battle between Microsoft and Netscape. But overresponding to change has been cited as the source of many software disasters, such as the $3 billion overrun of the US Federal Aviation Administration's Advanced Automation System for national air traffic control. The author believes that both agile and plan-driven approaches have a responsible center and overinterpreting radical fringes. Agile and plan-driven methods both form part of the planning spectrum. Thus, while each approach has a home ground within which it performs very well, and much better than the other, a combined approach is feasible and preferable in some circumstances},
        keywords={professional aspects; project management; software engineering; Internet browser battle; agile driven software development methods; agile methods; agile-driven approach; combined approach; comprehensive spectrum; critical technical success factor; national air traffic control; plan-driven approach; plan-driven software development methods; planning spectrum; real-world examples; software disasters},
        isbn={0018-9162},
}

RefWorks:89
@article{Boehm2005,
    author={B. Boehm and R. Turner},
    year={2005},
    title={Management challenges to implementing agile processes in traditional development organizations},
    journal={Software, IEEE},
    volume={22},
    number={5},
    pages={30-39},
    abstract={Discussions with traditional developers and managers concerning agile software development practices nearly always contain two somewhat contradictory ideas. They find that on small, stand-alone projects, agile practices are less burdensome and more in tune with the software industry's increasing needs for rapid development and coping with continuous change. Managers face several barriers, real and perceived, when they try to bring agile approaches into traditional organizations. They categorized the barriers either as problems only in terms of scope or scale, or as significant general issues needing resolution. From these two categories, we've identified three areas - development process conflicts, business process conflicts, and people conflicts - that we believe are the critical challenges to software managers of large organizations in bringing agile approaches to bear in their projects.},
    keywords={DP industry; project management; software development management; agile software development practices; business process conflicts; development process conflicts; people conflicts; project management challenges; software industry; software management; traditional development organizations},
    isbn={0740-7459}
}

RefWorks:162
@article{Cohn2003,
    author={Cohn,M. and Ford,D.},
    year={2003},
    title={Introducing an agile process to an organization [software development]},
    journal={Computer},
    volume={36},
    number={6},
    pages={74-78},
    abstract={The transition from a plan-driven to an agile software development process affects not only the development team members, but also other teams, departments, and management. Any new process will likely attract developers excited to try it while repelling those opposed to change. Thus, how an agile process is introduced into an organization significantly affects its ultimate success.},
    keywords={software development management; agile software development process},
    isbn={0018-9162},
}

RefWorks:149
@article{Dyba2008,
    author={Tore Dybå and Torgeir Dingsøyr},
    year={2008},
    month={aug},
    title={Empirical studies of agile software development: A systematic review},
    journal={Information and Software Technology},
    volume={50},
    number={9-10},
    pages={833-859},
    keywords={Agile software development; Empirical software engineering; Evidence-based software engineering; Extreme programming; Research synthesis; Scrum; Systematic review; XP},
    isbn={0950-5849}
}

RefWorks:151
@article{Dyba2009,
    author={Tore Dybå and Torgeir Dingsøyr},
    year={2009},
    title={What Do We Know about Agile Software Development?},
    journal={Software, IEEE},
    volume={26},
    number={5},
    pages={6-9},
    abstract={Agile software development has had a huge impact on how software is developed worldwide. We can view agile methods such as Extreme Programming (XP) and Scrum as a reaction to plan-based or traditional methods, which emphasize a "rationalized, engineering-based approach, incorporating extensive planning, codified processes, and rigorous reuse. In contrast, agile methods address the challenge of an unpredictable world, emphasizing the value competent people and their relationships bring to software development. To clarify the effectiveness of agile methods, we reviewed the agile development literature and conducted a systematic study of what we know empirically about its benefits and limitations.},
    keywords={project management; software development management; software reusability; Scrum; agile project management; agile software development; codified process; extensive planning; extreme programming; rationalized engineering-based approach; rigorous reuse},
    isbn={0740-7459}
}

RefWorks:158
@article{Highsmith2001,
	author={Highsmith,J. and Cockburn,A.},
	year={2001},
	title={Agile software development: the business of innovation},
	journal={Computer},
	volume={34},
	number={9},
	pages={120-127},
	abstract={The rise and fall of the dotcom-driven Internet economy shouldn't distract us from seeing that the business environment continues to change at a dramatically increasing pace. To thrive in this turbulent environment, we must confront the business need for relentless innovation and forge the future workforce culture. Agile software development approaches, such as extreme programming, Crystal methods, lean development, Scrum, adaptive software development (ASD) and others, view change from a perspective that mirrors today's turbulent business and technology environment},
	keywords={business data processing; management of change; software engineering; Crystal methods; Internet economy; Scrum; adaptive software development; agile software development approaches; changing business environment; extreme programming; innovation; lean development; software management; technology environment; workforce culture},
	isbn={0018-9162},
}

RefWorks:148
@techreport{Kitchenham2007,
	author={B. A. Kitchenham},
	year={2007},
	title={Guidelines for performing Systematic Literature Reviews in Software Engineering},
	institution={Keele University Technical Report},
	type={Technical report},
	number={EBSE-2007-01}
}

RefWorks:138
@article{Lindvall2004,
    author={M. Lindvall and D. Muthig and A. Dagnino and C. Wallin and M. Stupperich and D. Kiefer and J. May and T. Kahkonen},
    year={2004},
    title={Agile software development in large organizations},
    journal={Computer},
    volume={37},
    number={12},
    pages={26-34},
    abstract={The need to see compelling evidence before adopting new methods looms greater in large organizations because of their complexity and the need to integrate new technologies and processes with existing ones. To further evaluate agile methods and their underlying software development practices, several Software Experience Center (SEC) member companies initiated a series of activities to discover if agile practices match their organizations' needs. Although each organization evaluated agile methods according to its specific needs, here we attempt to generalize their findings by analyzing some of their common experiences in the particular context of large organizations with well-established structures and processes. We base this analysis on experience collected and shared among four SEC members namely ABB, DaimlerChrysler, Motorola, and Nokia.},
    keywords={organisational aspects; programming; project management; software management; software process improvement; Software Experience Center; agile software development; extreme programming; organizational needs; software engineering; software project management},
    isbn={0018-9162}
}

RefWorks:152
@article{Livermore2008,
    author={Jeffrey A. Livermore},
    year={2008},
    title={Factors that Significantly Impact the Implementation of an Agile Software Development Methodology},
    journal={Journal of Software},
    volume={3},
    number={4},
    pages={31-36},
    abstract={The Internet economy has altered the current rules of software engineering.  Traditional development methodologies have proven too cumbersome to  meet the rapidly changing requirements and short product cycles demanded  by business today. To meet these rapidly changing requirements,  software developers have developed agile software development  methodologies (SDMs) utilizing iterative development, prototyping,  templates, and minimal documentation requirements. This research project  investigated agile SDM implementation using an online survey sent to  software development practitioners worldwide. This survey data was used  to identify factors related to agile SDM implementation. The factors  that significantly impacted agile methodology implementations included  training, management involvement, access to external resources, and  corporation size. Other factors such as using models, having an  implementation plan, collocating the development team, and developing  software for Internet or intranet use did not significantly impact the  implementation of an agile software development methodology. A number of  the factors that impact the implementation of an agile development  methodology are completely under the control of management.  Organizations that are considering implement ting an agile methodology  are able to manipulate some of these factors to increase the  opportunities for success of their methodology.},
    isbn={1796-217X}
}

Refworks:155
@article{Mahanti2006,
    author={Mahanti,Aniket},
    year={2006},
    title={Challenges in Enterprise Adoption of Agile Methods - A Survey},
    journal={Journal of Computing and Information Technology},
    volume={14},
    number={3},
    pages={197-206},
    abstract={Agile methods are a departure from plan-driven traditional approaches,  where the focus is on generating early releases of working software  using collaborative techniques, code refactoring, and on-site customer  involvement. Research and surveys have shown that agile methodologies  are an efficient way of producing software with significant advantages  in production costs, time-to-market, complexity, and quality improvement  over heavy-weight traditional methodologies.  Even with such apparent  advantages the information technology industry has not seen large-scale  adoption of agile methods. In this survey paper, the major challenges in  adopting agile practices by enterprises are addressed.  Drawing  information from the literature issues like framework for agile  organizational change and adoption strategies are examined. Inputs from  the industry suggest that most organizations are best suited in adopting  a combination of traditional and agile method. There is no agile  methodology that can be universally applied and have to be tailored to  integrate into existing processes.},
}

RefWorks:23
@article{Misra2009,
    author={S. C. Misra and V. Kumar and U. Kumar},
    year={2010},
    title={Identifying some critical changes required in adopting agile practices in traditional software development projects},
    journal={International Journal of Quality and Reliability Management},
    volume={27},
    number={4},
    pages={451-474},
    abstract={Purpose: Agile software development (ASD) is currently an emerging approach in software engineering for improving quality, initially advocated by a group of 17 software professionals who practice a set of "lightweight" methods, and share a common set of values of software development. Owing to the attractive claims of successes of the ASD approach, many traditional projects, which used to practice plan-driven software development, are gradually transitioning into ASD-based development. This paper seeks to report the results from a survey-based ex-post-facto study aimed at determining the relative importance, if any, of the changes traditional plan-driven software development projects have to undergo to adopt ASD practices. Design/methodology/approach: The study was conducted using a web-based survey with ASD practitioners who had experience of practicing plan-driven software development in the past. ASD practitioners from a wide range of industrial sectors participated in the study. Similarly, the study is not restricted to any specific organisation/project size, culture, or nationality - the respondents were widely geographically distributed across continents. Findings: The study received 241 responses, of which 165 were usable. The study did not reveal any substantial difference in importance of the four classes of changes hypothesised - changes in culture, changes in management style, changes in knowledge management strategy and changes in development processes. The authors believe that this is an important finding because it is indicative of not isolating one class of changes from another in practical transition exercises. However, another noteworthy observation was that transitioning from heavily process-centric to short, iterative, test-driven, and people-centric development was considered by the largest percentage (roughly 77 per cent) of respondents to be very important. The open-ended questions in the study also revealed three additional classes of changes: changes in personal characteristics, changes in customer attitude, and changes in knowledge and education of stakeholders. Originality/value: In this work an attempt was made to gain an understanding of the relative importance of the different critical changes that would be helpful to a project manager who is involved in the transition from traditional plan-driven software development practices to agile software development practices. © Emerald Group Publishing Limited.},
    keywords={Change management; Software engineering}
}

RefWorks:62
@article{Nerur2005,
    author={Sridhar Nerur and RadhaKanta Mahapatra and George Mangalaraj},
    year={2005},
    month={may},
    title={Challenges of migrating to agile methodologies},
    journal={Commun.ACM},
    volume={48},
    number={5},
    pages={72-78},
    abstract={Software development methodologies are constantly evolving due to  changing technologies and new demands from users. Today's dynamic  business environment has given rise to emergent organizations that  continuously adapt their structures, strategies, and policies to suit  the new environment [12]. Such organizations need information systems  that constantly evolve to meet their changing requirements---but the  traditional, plan-driven software development methodologies lack the  flexibility to dynamically adjust the development process.},
    isbn={0001-0782}
}

RefWorks:20
@article{Petersen2010,
    author={K. Petersen and C. Wohlin},
    year={2010},
    title={The effect of moving from a plan-driven to an incremental software development approach with agile practices: An industrial case study},
    journal={Empirical Software Engineering},
    volume={15},
    number={6},
    pages={654-693},
    abstract={So far, only few in-depth studies focused on the direct comparison of process models in general, and between plan-driven and incremental/agile approaches in particular. That is, it is not made explicit what the effect is of moving from one model to another model. Furthermore, there is limited evidence on advantages and issues encountered in agile software development, this is specifically true in the context of large-scale development. The objective of the paper is to investigate how the perception of bottlenecks, unnecessary work, and rework (from hereon referred to as issues) changes when migrating from a plan-driven to an incremental software development approach with agile practices (flexible product backlog, face-to-face interaction, and frequent integration), and how commonly perceived these practices are across different systems and development roles. The context in which the objective should be achieved is large-scale development with a market-driven focus. The selection of the context was based on the observation in related work that mostly small software development projects were investigated and that the investigation was focused on one agile model (eXtreme programming). A case study was conducted at a development site of Ericsson AB, located in Sweden in the end of 2007. In total 33 interviews were conducted in order to investigate the perceived change when migrating from plan-driven to incremental and agile software development, the interviews being the primary source of evidence. For triangulation purposes measurements collected by Ericsson were considered, the measurements relating to unnecessary work (amount of discarded requirements) and rework (data on testing efficiency and maintenance effort). Triangulation in this context means that the measurements were used to confirm the perceived changes with an additional data source. In total 64 issues were identified, 24 being of general nature and the remaining 40 being local and therefore unique to individuals opinions or a specific system. The most common ones were documented and analyzed in detail. The commonality refers to how many persons in different roles and across the systems studied have mentioned the issues for each of the process models. The majority of the most common issues relates to plan-driven development. We also identified common issues remaining for agile after the migration, which were related to testing lead-time, test coverage, software release, and coordination overhead. Improvements were identified as many issues commonly raised for the plan-driven approach were not raised anymore for the incremental and agile approach. It is concluded that the recent introduction (start in 2005 with the study being conducted in the end of 2007) of incremental and agile practices brings added values in comparison to the plan-driven approach, which is evident from the absence of critical issues that are encountered in plan-driven development. © 2010 Springer Science+Business Media, LLC.},
    keywords={Agile; Case study; Incremental; Migration; Plan-driven}
}

@book{Schwaber2002,
  title={Agile software development with scrum},
  author={Schwaber, K. and Beedle, M.},
  isbn={9780130676344},
  lccn={2001052400},
  series={Series in agile software development},
  year={2002},
  publisher={Prentice Hall}
}

****************************** Generated *********************************




@inproceedings{RefWorks:124,
    author={A. N. Abdel-Hamid and M. A. Abdel-Kader},
    year={2011},
    title={Process Increments: An Agile Approach to Software Process Improvement},
    booktitle={Agile Conference (AGILE), 2011},
    pages={195-200},
    note={ID: 3},
    abstract={Process Increments' is an iterative and incremental approach to manage software process improvement projects. It partitions the scope into user-story-like increments, and manages the whole project using agile estimating and planning techniques. This approach has been applied to five enterprises and showed sustained improvement velocity, good project visibility, and on-going learning experiences by project teams.}
}

@book{RefWorks:32,
    author={P. Abrahamsson},
    year={2007},
    title={Agile software development of mobile information systems},
    volume={4495 LNCS},
    pages={1-4},
    note={Cited By (since 1996): 2},
    abstract={Agile software development methods are quickly being adopted by the software industry. Concerns have been raised whether agile methods are suitable for any given information systems development domain. Indeed, quite little is known empirically about the validity of agile methods in most of the industrial domains. Mobile information systems present no exception in this sense. Yet, they are subject to frequent requirements changes in terms of changing business needs and technology, and their market is highly competitive. Moreover, most of these systems are far away from so called agile home ground. This talk presents the need for agile methods in the focal domain, identifies their shortcomings on the basis of three large-scale case studies from industry. All of the cases deal with the development of mobile information system and come from Nokia, F-Secure and Philips. The talk also discusses the possible strategies for deploying agile solutions in practice. © Springer-Verlag Berlin Heidelberg 2007.},
    keywords={Agile software development; Case study; Mobile information systems}
}

@inproceedings{RefWorks:91,
    author={M. Aoyama},
    year={1998},
    title={Agile Software Process and its experience},
    booktitle={Software Engineering, 1998. Proceedings of the 1998 International Conference on},
    pages={3-12},
    note={ID: 18},
    abstract={This article proposes a new software process model, ASP (Agile Software Process) and discusses its experience in large-scale software development. The Japanese software factory was a successful model in the development of quality software for large-scale business applications in the 80s. However, the requirements for software development have dramatically changed. Development cycle-time has been promoted to one of the top goals of software development in the 90s. Unlike conventional software process models based on volume, the ASP is a time-based process model which aims at quick delivery of software products by integrating the lightweight processes, modular process structures and incremental and iterative process enaction. The major contributions of APS include: a new process model and its enaction mechanism based on time; a software process model for evolutional delivery; a software process architecture integrating concurrent and asynchronous processes, incremental and iterative process enaction, distributed multi-site processes, and the people-centered processes; a process-centered software engineering environment for ASP; and experience and lessons learned from the use of ASP in the development of a family of large-scale communication software systems for more than five years},
    isbn={0270-5257}
}

@inproceedings{RefWorks:96,
    author={M. Aoyama},
    year={1997},
    title={Agile Software Process model},
    booktitle={Computer Software and Applications Conference, 1997. COMPSAC '97. Proceedings., The Twenty-First Annual International},
    pages={454-459},
    note={ID: 4},
    abstract={The article proposes a new software process model, ASP (Agile Software Process) based on a decade-long evolution of software process models inside a Japanese software factory. The Japanese software factory was a successful model in the development of quality software for large-scale business applications in the 1980s. However, the business climate of software development has dramatically changed in the last few years. Development cycle-time was promoted to one of the top issues of software development in the 1990s and then globalization appeared. A new paradigm of software development is required. The RSP model does not implicate any physical office but a virtual collaboration space over the Internet. It enables multiple small teams, which are geographically distributed, to concurrently develop multiple functions for a family of large-scale software systems}
}

@inproceedings{RefWorks:147,
    author={E. Babinet and R. Ramanathan},
    year={2008},
    title={Dependency Management in a Large Agile Environment},
    booktitle={Agile, 2008. AGILE '08. Conference},
    pages={401-406},
    note={ID: 1},
    abstract={Salesforce.compsilas R&D organization has over 30 Scrum teams working simultaneously in a single release code branch. This report highlights practices that salesforce.com has been using successfully to scale Scrum and to manage inter-team dependencies.}
}

@inproceedings{RefWorks:67,
    author={Udayan Banerjee and Eswaran Narasimhan and N. Kanakalata},
    year={2011},
    title={Experience of executing fixed price off-shored agile project},
    booktitle={Proceedings of the 4th India Software Engineering Conference},
    series={ISEC '11},
    publisher={ACM},
    address={New York, NY, USA},
    location={Thiruvananthapuram, Kerala, India},
    pages={69-75},
    abstract={
Organizations delivering offshore  software development services have traditionally focused on CMMI  framework to deliver quality software. With agile methodologies gaining  more wide spread acceptance, such organizations cannot stay away from  them. There are concerns about combining agile methodologies with  offshoring. There are also concerns about mismatch of agile  methodologies with CMMI framework. 
In this paper we have looked  at the problem from the perspective of an offshore software development  organization and recounted our experience in adopting agile methodology  in executing fixed price agile project. The challenges we have faced  comes from three different dimensions. First is to address the issue of  having an agile team split across two different countries. The second is  to execute the agile project within the framework prescribed under  CMMI. Here the challenge is not only to address the actual gap between  CMMI and agile methodologies but also to address the perceived  shortcomings of agile methodologies. The third dimension is to execute  the project as a fixed price one where the requirement is not frozen at  the beginning of the project. 
We have listed the challenges that  we have faced. They can be categorized under requirements management,  contract management, team management, distributed working, when to  design, role of a specialist, testing challenges and CMMI adherence. The  different solutions tried and the levels of success in overcoming them  have also been included. Our experience indicates that agile  methodologies can coexist with offshoring and CMMI framework.},
    keywords={CMMI; agile; offshore; software development process},
    isbn={978-1-4503-0559-4},
    url={http://doi.acm.org/10.1145/1953355.1953364}
}

@inproceedings{RefWorks:135,
    author={J. M. Bass},
    year={2012},
    title={Influences on Agile Practice Tailoring in Enterprise Software Development},
    booktitle={AGILE India (AGILE INDIA), 2012},
    pages={1-9},
    note={ID: 1},
    abstract={Agile development projects have become a reality in large enterprises using offshore development models. A case study involving seven international companies with offices in Bangalore, India, and London, UK was conducted, including interviews with 19 practitioners. The contribution of this paper is to illustrate the reasons for tailoring Agile practices within the context of large enterprises. The findings show that scrum roles and practices did not conflict with enterprise policies or processes and were thought to improve product quality and productivity. However, agile practices from the XP tradition were not so widely adopted. Test driven development did not integrate well within enterprises where independent quality assurance teams were constituted as separate departments. Continuous integration was found to be challenging where enterprise software products required time consuming regression testing and elaborate code release processes. While adoption of coding standards and collective code ownership are necessary to facilitate interaction between disparate stakeholder groups.}
}

@article{RefWorks:21,
    author={D. Batra and W. Xia and D. van der Meer and K. Dutta},
    year={2010},
    title={Balancing agile and structured development approaches to successfully manage large distributed software projects: A case study from the cruise line industry},
    journal={Communications of the Association for Information Systems},
    volume={27},
    number={1},
    pages={379-394},
    note={Cited By (since 1996): 1},
    abstract={Agile methods and traditional structured approaches are often viewed as competing bi-polar choices. Agile methods such as Scrum and XP are recommended for small, co-located projects that involve changing requirements. The traditional structured plan-driven approaches, such as the Capability Maturity Model (CMM) and the waterfall lifecycle frameworks, are recommended for large projects with stable requirements. If a project is large, strategically important, distributed, and has dynamic user requirements and organizational changes, it presents unique challenges that neither the agile methods nor the traditional structured approaches can effectively deal with alone. Although there is an increasing call for a balanced approach, there is little empirical research that shows when and how the two approaches can complement each other. Based on a case study from the cruise line industry of a large distributed strategic project with unanticipated changes, we conclude that this balance is not only workable, but is essential to ensure that the project demonstrates both control and agility for achieving its challenging and dynamic goals. Agile without structure can cause chaos, particularly in large complex distributed projects where planning, control, and coordination are critical. Structure without agility can lead to rigidity, particularly when a project involves a great deal of learning, discovery, and changes. © 2010 by the authors.},
    keywords={Administrative functional system; Case study; Development approach; Organization; Outsourcing; Project; Stakeholder involvement; Transaction system}
}

@article{RefWorks:51,
    author={Dinesh Batra},
    year={2009},
    month={sep},
    title={Modified agile practices for outsourced software projects},
    journal={Commun.ACM},
    volume={52},
    number={9},
    pages={143-148},
    abstract={
Frustration with the bureaucratic nature  of the disciplined approach has led to the call for agile development.  The new approach is defined by the Agile Manifesto  (http://agilemanifesto.org/), which values individuals and interactions  over processes and tools, working software over comprehensive  documentation, customer collaboration over contract negotiation, and  agility in responding to change over following a prescribed plan. Agile  development does not focus on process improvement; instead it focuses on  customer satisfaction and employee empowerment. This is evident from  reading the stated values and principles of the Agile Manifesto, which  include fairly extreme positions such as "welcome changing requirements,  even late in development" and "the best architectures, requirements,  and designs emerge from self-organizing teams." 
An interesting  issue arising from the call for agile development is its role in  distributed development, which usually translates to offshore  development. A recent study indicates that agile practices can reduce  temporal, geographical, and socio-cultural distances in distributed  development projects. The study researched agile development between  teams located in the U.S. and Ireland, and while it reported that  overall communication was improved, it also noted problems related to  geographical, temporal, and even language distances. Although there are  other reported successes of distributed agile development, the projects  are generally small, the team members are likely familiar with each  other, and the participants are largely experts or high caliber  developers. 
This raises a research, as well as a practical,  question: can we extend the use of agile practices from small projects  to medium and large projects that involve a significant outsourcing  component? To address this question, we must drop constraints such as  small size projects, and expert developers belonging to the same  company, and examine problems arising from geographical, temporal, and  cultural distances. Accordingly, agile practices may need to be  modified. 
In this article, the key issues of software projects  with an outsourced component are first identified. These issues are then  used as a background to evaluate how standard agile practices stand up  when applied to larger projects. This evaluation is followed by  recommendations for modified agile practices for outsourced software  projects.},
    isbn={0001-0782},
    url={http://doi.acm.org/10.1145/1562164.1562200}
}

@inproceedings{RefWorks:31,
    author={P. A. Beavers},
    year={2007},
    title={Managing a large "Agile" software engineering organization},
    organization={Affiliation: Software Engineering, BMC Software},
    pages={296-303},
    note={Cited By (since 1996): 2},
    abstract={This is the story of my business and personal transformation as our department adopted the Agile methodology. The bumps and bruises along the way forced a shift in management philosophy. Embracing the transformation has enabled significant success within the company. The confidence of our customers and internal organizations in our ability to deliver high quality software has increased dramatically. Software releases are now delivered on time with an improved level of quality. However, this success did not necessarily come easily. There were many obstacles to overcome as this large organization transformed itself from a largely waterfall development organization into a high-output Agile development machine. This article presents this transformation and the impact it had on the organization's leadership and management styles. © 2007 IEEE.}
}

@inproceedings{RefWorks:150,
    author={S. Bhalerao and M. Ingle},
    year={2010},
    title={Analyzing the modes of communication in agile practices},
    booktitle={Computer Science and Information Technology (ICCSIT), 2010 3rd IEEE International Conference on},
    volume={3},
    pages={391-395},
    note={ID: 1},
    abstract={Agile practices have grappled their importance for development of softwares in industries. Agile methods demand active communication with customers and team members to achieve the highest customer satisfaction. Effective communication is the need for building trust and discipline among the team members and customers. It has been observed in literature that active communication in communication hierarchy plays a vital role in improving design and quality of software. It reduces the project development time and cost of change of software. We have conducted a survey and analyzed the data based upon modes of communication. The investigation reveals that active communication may be important during primary and end level of agile communication iterative cycle whereas passive communication is highly useful at the mid-level of cycle. The importance of communication modes at various phases of software development has also been discussed in this paper.}
}

@inproceedings{RefWorks:137,
    author={B. Blau and T. Hildenbrand},
    year={2011},
    title={Product Line Engineering in Large-Scale Lean and Agile Software Product Development Environments - Towards a Hybrid Approach to Decentral Control and Managed Reuse},
    booktitle={Availability, Reliability and Security (ARES), 2011 Sixth International Conference on},
    pages={404-408},
    note={ID: 1},
    abstract={Despite the fact that lean and agile software development has become mainstream recently, especially for larger-scale organizations building complex products, the methodology leaves many architectural questions unanswered. For instance, agile methods such as Extreme Programming propose late architectural decisions and frequent refactoring, while others suggest an "architectural runway" as infrastructure for a certain set of upcoming customer features. Software "product lines" consist of a set of software products that share a common, managed set of features. These product lines are developed from reusable core assets incorporating variations in order to derive customer-specific product variants. Hence, this research explores interoperability and complementarity of lean and agile approaches in combination with a software product line engineering approach. With this position paper, we discuss both, (i) complementing architectural issues in large scale lean and agile development and (ii) providing methodological guidance to make product line engineering more agile and efficient. In doing so, we come to the conclusion that this combination enables us to build the right products in time and budget. Our findings are based on observations and experience from a large-scale software company with several thousand developers working on various solution combinations of highly interdependent products.}
}

@inproceedings{RefWorks:58,
    author={Eric Brechner},
    year={2005},
    title={Journey of enlightenment: the evolution of development at Microsoft},
    booktitle={Proceedings of the 27th international conference on Software engineering},
    series={ICSE '05},
    publisher={ACM},
    address={New York, NY, USA},
    location={St. Louis, MO, USA},
    pages={39-42},
    abstract={Like many software companies, Microsoft has been doing distributed  application development for many years. However, recent changes in the  market have altered the rules, both in terms of customer expectations  and programming models for ubiquitous interconnected smart devices.  These changes have provoked two dramatic shifts in the way we develop  software. The first is the creation and use of the .NET Framework as a  simple, secure, and robust platform for device-independent software  development, data manipulation, and communications. The second is an  agile yet highly disciplined approach to designing, testing,  implementing, and verifying our software which presumes all bugs are  unacceptable and must be found and fixed early before they impact  internal groups, external partners, and eventually our customers. This  paper discusses the nature and impact of these two dramatic shifts to  the development practices at Microsoft.},
    keywords={.NET; Microsoft; SOAP; WSDL; XML; agile; collaboration; contracts; coordination; design; interfaces; lean; quality; refactoring; reliability; scrum; security; test driven development; versioning},
    isbn={1-58113-963-2},
    url={http://doi.acm.org/10.1145/1062455.1062473}
}

@article{RefWorks:45,
    author={P. Brereton and B. A. Kitchenham and D. Budgen and M. Turner and M. Khalil},
    year={2007},
    title={Lessons from applying the systematic literature review process within the software engineering domain},
    journal={Journal of Systems and Software},
    volume={80},
    number={4},
    pages={571-583},
    note={Cited By (since 1996): 83},
    abstract={A consequence of the growing number of empirical studies in software engineering is the need to adopt systematic approaches to assessing and aggregating research outcomes in order to provide a balanced and objective summary of research evidence for a particular topic. The paper reports experiences with applying one such approach, the practice of systematic literature review, to the published studies relevant to topics within the software engineering domain. The systematic literature review process is summarised, a number of reviews being undertaken by the authors and others are described and some lessons about the applicability of this practice to software engineering are extracted. The basic systematic literature review process seems appropriate to software engineering and the preparation and validation of a review protocol in advance of a review activity is especially valuable. The paper highlights areas where some adaptation of the process to accommodate the domain-specific characteristics of software engineering is needed as well as areas where improvements to current software engineering infrastructure and practices would enhance its applicability. In particular, infrastructure support provided by software engineering indexing databases is inadequate. Also, the quality of abstracts is poor; it is usually not possible to judge the relevance of a study from a review of the abstract alone. © 2006 Elsevier Inc. All rights reserved.},
    keywords={Empirical software engineering; Systematic literature review}
}

@inproceedings{RefWorks:42,
    author={L. Cao and K. Mohan and P. Xu and B. Ramesh},
    year={2004},
    title={How extreme does extreme Programming have to be? Adapting XP practices to large-scale projects},
    organization={Affiliation: Georgia State University, United States; Affiliation: Baruch College, United States},
    volume={37},
    pages={1335-1344},
    note={Cited By (since 1996): 5},
    abstract={The need to develop software at Internet speed and accommodate changes during the entire software development life cycle has made lightweight or agile development methodologies like Extreme Programming popular. However, such methodologies have been considered to be beneficial for small and medium sized projects, with small teams. In this research, based on a case study in an organization that develops large-scale, complex software using a modified form of extreme programming, we highlight the key differences between agile principles proposed in prior literature and the agile practices that are suitable for large-scale, complex software development. Based on these differences, we propose general guidelines on tailoring agile development methodologies to make them suitable for the development of large, complex software systems.}
}

@inproceedings{RefWorks:111,
    author={J. Q. Chen and Dien Phan and B. Wang and D. R. Vogel},
    year={2007},
    title={Light-Weight Development Method: a Case Study},
    booktitle={Service Systems and Service Management, 2007 International Conference on},
    pages={1-6},
    note={ID: 2},
    abstract={The Internet technology has changed the way software applications are designed, built, and distributed. The technology enables us to deliver applications easily and quickly, and provides more efficient methods to do maintenance and updates. Web application developments present specific challenges to developers, such as content-rich, security, volatile system requirements, application scalability, rapidly evolving development tools, and ever increasing demand for fast system deployment by customers. These add up to the difficulty of software project planning, budgeting, and controlling. In recent years a number of new development methodologies, called agile methodologies, have become increasingly popular in the software industry. This paper reviews several major agile methodologies, compares them with traditional methods, and proposes a selection framework for business. The paper also provides a case study of an early attempt to use agile development at Intel. The success at Intel proved that agile methods can be used to develop successful web-based applications at large organizations.}
}

@article{RefWorks:13,
    author={K. Conboy and S. Coyle and X. Wang and M. Pikkarainen},
    year={2011},
    title={People over process: Key challenges in agile development},
    journal={IEEE Software},
    volume={28},
    number={4},
    pages={48-57},
    abstract={There's a common perception that, although developers might experience some "teething" problems during the initial transition to agile methods, they're much happier, more engaged, and ultimately more productive with agile methods. However, this belief might not always hold true. Case studies identified many serious "people" challenges that 17 large multinational organizations experienced after using agile methods for more than three years. Challenges range from recruitment of agile staff to training, motivation, and performance evaluation. The studies produced a set of actionable recommendations on how organizations can overcome these challenges on the basis of better practices uncovered during the studies. © 2011 IEEE.},
    keywords={adoption; agile; agile software development; developers; methodologies; people factors; software development; software engineering}
}

@inproceedings{RefWorks:108,
    author={M. Coram and S. Bohner},
    year={2005},
    title={The impact of agile methods on software project management},
    booktitle={Engineering of Computer-Based Systems, 2005. ECBS '05. 12th IEEE International Conference and Workshops on the},
    pages={363-370},
    note={ID: 16},
    abstract={As more and more software projects engage agile methods, there are emerging patterns of success and failure. With growing adoption of agile methods, project managers increasingly need to understand the applicability to their projects and factors that drive key project performance characteristics. While some organizations affirm that agile methods solve all their problems, few have shown consistent success over a range of typical software projects. Agile methods have advantages, especially in accommodating change due to volatile requirements. However, they also present concomitant risks with managing the many dependent pieces of work distributed across a large project. Use of agile methods therefore presents a set of tradeoffs. This paper examines the impact of agile methods on the people involved in a project, the process under which a project is developed, and on the project itself in an attempt to allow project managers to evaluate the applicability using an agile method.}
}

@inproceedings{RefWorks:14,
    author={S. Datta and R. Sindhgatta and B. Sengupta},
    year={2011},
    title={Evolution of developer collaboration on the Jazz platform: A study of a large scale agile project},
    organization={Affiliation: IBM India Research Lab., Embassy Golf Links, Bangalore 560071, India},
    pages={21-30},
    abstract={Collaboration is a key aspect of the agile philosophy of software development. As a software system matures over iterations, trends of developer collaboration can offer valuable insights into project dynamics. In this paper, we study evolution of developer collaboration for a large scale agile project on the Jazz platform. We construct networks of collaboration based on developer affiliations across comments on work items and file changes; and then compare parameters of such networks with established results from networks of scientific collaborations. The comparisons illuminate interesting facets of developer collaboration on the Jazz platform. Such perception helps deeper understanding of the role of interaction in agile projects, as well as more effective project governance.},
    keywords={Agile development; Collaboration; Jazz; Social network analysis; Software teams}
}

@inproceedings{RefWorks:71,
    author={Yael Dubinsky and Orit Hazzan},
    year={2010},
    title={Ad-hoc leadership in agile software development environments},
    booktitle={Proceedings of the 2010 ICSE Workshop on Cooperative and Human Aspects of Software Engineering},
    series={CHASE '10},
    publisher={ACM},
    address={New York, NY, USA},
    location={Cape Town, South Africa},
    pages={32-38},
    note={Enemmän johtajuudesta kuin agile transformaatiosta},
    abstract={Leadership is the ability to influence people, leading them to behave in  a certain way in order to achieve the group's goals. Leadership is  independent of job titles and descriptions. Usually, however, in order  to lead, leaders need the power derived from their organizational  positions. There are different leadership styles, like task-oriented  versus people-oriented, directive versus permissive, autocrat versus  democrat. In this paper, we examine the leadership concept in software  development environments and focus on leadership in transition processes  to agile software development. Specifically, based on our comprehensive  research on agile software development, we suggest a leadership style -  ad-hoc leadership - that usually emerges in such change processes. We  present the characteristics, dynamic and uniqueness of this leadership  style and illustrate its usefulness for the analysis of representative  scenarios.},
    keywords={ad-hoc leadership; agile software development; change leader; leadership},
    isbn={978-1-60558-966-4},
    url={http://doi.acm.org/10.1145/1833310.1833316}
}

@inproceedings{RefWorks:64,
    author={Ahmed Elshamy and Amr Elssamadisy},
    year={2007},
    title={Applying agile to large projects: new agile software development practices for large projects},
    booktitle={Proceedings of the 8th international conference on Agile processes in software engineering and extreme programming},
    series={XP'07},
    publisher={Springer-Verlag},
    address={Berlin, Heidelberg},
    location={Como, Italy},
    pages={46-53},
    abstract={Large software development projects are not agile by nature. Large  projects are not easy to implement, they are even harder to implement  using agile methodologies. Based on over seven years of experience  building software systems using agile methodologies we found that large  software projects require more practices than the usual used in small  projects. In this paper, we will introduce a set of new and modified  development practices, which will help developing a large agile project.},
    isbn={978-3-540-73100-9},
    url={http://dl.acm.org/citation.cfm?id=1768961.1768970}
}

@inproceedings{RefWorks:74,
    author={A. Farrow and S. Greene},
    year={2008},
    title={Fast & Predictable A Lightweight Release Framework Promotes Agility through Rhythm and Flow},
    booktitle={Agile, 2008. AGILE '08. Conference},
    pages={224-228},
    note={ID: 1},
    abstract={Embarking on salesforce.compsilas large scale transformation to our adaptive development methodology presented many unique challenges due to the scale of the rollout as well as the need to align a large number of teams (30+) to a common release date, 3-4 times per year. To specifically address the latter challenge, we created a lightweight release framework in order to optimize on-time, high quality delivery to our customers and partners. Salesforce.com delivers product functionality using the software-as-a-service hosted model and has 30+ scrum teams working on a single release concurrently. The release framework that we created exhibitscharacteristics different than most release processes--simple, lightweight, unambiguous, and visibleeverywhere, to our entire technology organization. By implementing this lightweight release framework and making it highly visible, wepsilave organically promoted a cyclical harmony and rhythm in our organization and across all scrum teams. This cyclical harmony and rhythm has created an environment where local team agility is promoted, facilitated and thrives. To support an agile methodology effectively on an enterprise scale, a lightweight release framework is highly useful in empowering small self-organizing teams while "optimizing the whole" of the product you are focused on delivering. Interestingly enough, we found that the absence of one can actually inhibit agility and avoidable ambiguity, in an environment where there is a high degree of unavoidable ambiguity.}
}

@inproceedings{RefWorks:113,
    author={A. M. Figueiredo},
    year={2009},
    title={An Executive Scrum Team},
    booktitle={Agile Conference, 2009. AGILE '09.},
    pages={147-150},
    note={ID: 4},
    abstract={Scrum, like most of the agile processes, was created with the software projects world pains in mind. However, more and more itpsilas getting clearer that those pains are not exclusive to the software world, and they are present in whatever projects where change is a constant. In the executive business world today, change is a constant, and be prepared to them is a must. This way, Scrum reveals to be an appropriate framework to be used in executive business teams once they start to work focused on ROI (Return On Investment) and in the business goals, acquire teamwork spirit, making strategy and execution nearer, improve continuously and deliver value quickly. In this work the author will talk about his experience on using Scrum with senior management and how the results supported Scrum promotion for other projects inside the company.}
}

@article{RefWorks:79,
    author={P. Found and R. Harvey},
    year={2007},
    title={Leading the lean enterprise},
    journal={Engineering Management Journal},
    volume={17},
    number={1},
    note={ID: 6},
    abstract={A new generation of leaders and new models of effective leadership have emerged to manage the flatter organizational structures of the modern lean and agile companies. Research has shown that the roles of leaders change during the implementation of a lean transformation. There is a decision-making phase when change is initiated and leaders in this phase have to provide the vision and guidance, in addition to the resources, to enable the employees to understand the need for change and to accept and understand the reason for change. This calls for strategic, or transformational, leadership where goals and policies are clearly defined. Once defined, these can then be deployed and cascaded throughout the organization},
    keywords={lean production; organisational aspects; agile companies; business models; goal attainment; leadership; lean enterprises; organisational structures; team-based practices},
    isbn={0960-7919}
}

@book{RefWorks:7,
    author={D. Ganguly and S. Bhattacharyya},
    year={2011},
    title={Winning the industrial competitiveness with e-commerce adopting component-based software architecture},
    volume={105},
    pages={69-75},
    abstract={Over the years, several market mechanisms have sprung in electronic market space to tap new value creation opportunities. E-commerce B2B models are witnessing a move from traditionally being Brochure ware and Web Enablement of existing business process towards Business Model Reinvention (BMR). It begins with a new vision of the industry and winning business models. The key success variable to this achievement is Inter-enterprise Process Engineering. Component-based architecture provides the business benefits of rapid applications development for quick time to market, enterprise-wide consistency of business rules and quick response to changing business requirements. The paper begins with a brief description of the changing dynamics of business process in the BMR of e-commerce and then introduces the necessity of Inter-enterprise Process Engineering (IPE). We follow it up with a discussion on the component-based application architecture enabling BMR of e-commerce. Our observation establishes companies demand agile software in the face of accelerating business change. We have focused on the challenges in implementation of the same. . We conclude with the win-win situation of all players on successful implementation of Business Model Reinvention (BMR) of e-commerce. © 2011 Springer-Verlag Berlin Heidelberg.},
    keywords={B2B; BMR; cybermediaries; EPS; IPE; MRO; software components; virtual corporation}
}

@inproceedings{RefWorks:103,
    author={I. Gat},
    year={2006},
    title={How BMC is scaling agile development},
    booktitle={Agile Conference, 2006},
    pages={6 pp.-320},
    note={ID: 11},
    abstract={This report examines the large-scale deployment of agile software development in the Infrastructure Management Business Unit of BMC Software. The paper identifies and demonstrates several critical success, factors $such as empowerment, risk taking, and top-notch agile consulting - applying agile methodology as part of the overall software engineering "stack" and changing organizational structures. In particular, it highlights the relationship between empowerment and risk-taking, and suggests that the two should be managed in tandem as the foundation on which successful agile projects can evolve. Finally, the paper emphasizes the importance of implementing agile methodology across multiple corporate functions $marketing, sales, support, professional services, etc. It concludes with a review of the benefits that this approach provides to the end customers}
}

@inproceedings{RefWorks:107,
    author={D. Goodman and M. Elbaz},
    year={2008},
    title={"It's Not the Pants, it's the People in the Pants" Learnings from the Gap Agile Transformation What Worked, How We Did it, and What Still Puzzles Us},
    booktitle={Agile, 2008. AGILE '08. Conference},
    pages={112-115},
    note={ID: 15},
    abstract={After 7 years of traditional IT delivery, Gap Inc.Direct decided to adopt Agile. This experience report discusses three key factors that contributed to our successful (and ongoing) Agile transformation: 1. Ambitious Pilot Project, 2. Massive Investment in Continuous Integration, 3. Rethinking our Assets. The choices we made might seem risky and even counter-intuitive, but understanding them could help other organizations consider different points of view and priorities as they embark on the transition to Agile. Additionally, we will identify ongoing challenges and what is left in our transformation backlog.}
}

@article{RefWorks:5,
    author={E. Goodman and L. Loh},
    year={2011},
    title={Organizational change: A critical challenge for team effectiveness},
    journal={Business Information Review},
    volume={28},
    number={4},
    pages={242-250},
    abstract={Change is again in the spotlight. Much of the current debate about organizational change is focusing on large scale changes, e.g. public sector reshaping or the role of the third sector, for example, and many private sector organizations are working hard on internal efficiencies. All of these bring huge challenges. But what about the people and the teams within these organizations, who must continue to deliver today as well as achieve changes to their own roles and services for delivery tomorrow?This article describes some of the current drivers of change, and the challenges for teams. It highlights a number of models and approaches which describe the cycle of change and the elements of team effectiveness, and gives practical advice on how to use those to develop and support teams in a time of change. Our advice is grounded in good practice gained through real life experience, with practical tips and suggestions. These will help readers to build and rebuild teams so that they remain effective and the people in them motivated and aligned to the organization's goals. © SAGE Publications 2011.},
    keywords={change management; customer value; Lean; Six Sigma; stakeholder management; team effectiveness; team leadership; team learning}
}

@inproceedings{RefWorks:134,
    author={D. R. Greening},
    year={2010},
    title={Enterprise Scrum: Scaling Scrum to the Executive Level},
    booktitle={System Sciences (HICSS), 2010 43rd Hawaii International Conference on},
    pages={1-10},
    note={ID: 1},
    abstract={Our company manages 25 software engineering teams across 6 products using a single top-down Enterprise Scrum. We know of no other company doing this, yet it provides extreme visibility and control at the CXO level. It promotes agile thinking enterprise-wide, driving non-engineering departments to adopt Scrum. We believe it is making us more profitable.We estimate effort in team months, run quarterly Sprints, assign whole teams to projects, meet in weekly stand-ups. We start, postpone or cancel whole projects. Within individual projects, we still use 1-4 week Sprints and all the trappings of the classic Scrum process, including, in some cases, Scrum-of-Scrums. New challenges arise: Shared resource constraints suggest Kanban methods. Net Present Value can justify prioritization, but creates controversy. Moving teams between projects requires rapid programming environment setup. The process forces executives to justify decisions. We want simple improvement metrics, but they seem elusive.},
    isbn={1530-1605}
}

@inproceedings{RefWorks:101,
    author={G. K. Hanssen and A. F. Yamashita and R. Conradi and L. Moonen},
    year={2010},
    title={Software Entropy in Agile Product Evolution},
    booktitle={System Sciences (HICSS), 2010 43rd Hawaii International Conference on},
    pages={1-10},
    note={ID: 9},
    abstract={As agile software development principles and methods are being adopted by large software product organizations it is important to understand the role of software entropy. That is, how the maintainability of a system may degrade over time due to continuous change. This may on one side affect the ability to act agile in planning and development. On the other side, an agile process may affect growth of entropy. We report from a case study of a successful software product line organization that has adopted the agile development method Evo, showing how agility and entropy are negatively related. We conclude this study by suggesting a two-step approach to manage entropy while maintaining process agility. First, the system needs to be restructured to establish a level of manageable entropy, and then, that the agile process must be complemented with continuous semi-automated quality monitoring and refactoring support.},
    isbn={1530-1605}
}

@inproceedings{RefWorks:52,
    author={Orit Hazzan and Yael Dubinsky},
    year={2006},
    title={The concept of change in technology transfer},
    booktitle={Proceedings of the 2006 international workshop on Software technology transfer in software engineering},
    series={TT '06},
    publisher={ACM},
    address={New York, NY, USA},
    location={Shanghai, China},
    pages={29-34},
    abstract={In this paper we describe two case studies of technology transfer, both  of which address the adoption of Extreme Programming, the most prevalent  agile software development method. The first case takes place in an  industrial setting; the second -- in academia. For the analysis of these  cases, we use two concepts: a software development method lifestyle and  the concept of change. We propose that these concepts, as well as a  combination thereof, can serve as a framework within which change  processes in general, and technology transfer events in particular, can  be analyzed.},
    keywords={agile software development; change processes; extreme programming; software development methods; technology transfer},
    isbn={1-59593-412-X},
    url={http://doi.acm.org/10.1145/1138046.1138056}
}

@inproceedings{RefWorks:35,
    author={T. Hildenbrand and M. Geisser and T. Kude and D. Bruch and T. Acker},
    year={2008},
    title={Agile methodologies for distributed collaborative development of enterprise applications},
    organization={Affiliation: Department of Information Systems I, University of Mannheim, 68131 Mannheim, Germany},
    pages={540-545},
    note={Cited By (since 1996): 1},
    abstract={Managing large distributed software projects for enterprise applications with traditional methodologies designed for collocated teams often leads to high planning and management overheads. The sequential and plan-driven traditional approaches often do not allow for an adequate reaction to changes in requirements. Today, Extreme Programming (XP) is the most popular agile development methodology. This paper analyzes how and to what extent XP can be transferred to distributed development projects for large enterprise applications. The focus is on XP in particular, since it is the most common agile methodology in practice and has the highest congruence to the original Agile Manifesto. © 2008 IEEE.},
    keywords={Agile software development; Collaborative software development; Extreme programming; Software development processes; Software engineering; Tool support.}
}

@inproceedings{RefWorks:61,
    author={Michael Hirsch},
    year={2005},
    title={Moving from a plan driven culture to agile development},
    booktitle={Proceedings of the 27th international conference on Software engineering},
    series={ICSE '05},
    publisher={ACM},
    address={New York, NY, USA},
    location={St. Louis, MO, USA},
    pages={38-38},
    abstract={Plan driven cultures are characterized by a strong belief in the  plannability and predictability of software development projects. The  SEI-CMM, software process improvement initiatives, and software metrics  programs are some of the hallmarks of this school of thought. The more  recent trend towards agile development places the emphasis on constantly  adapting to a project's changing goals rather than on detailed upfront  planning. The majority of reports from pracitioners of agile development  are positive and confirm the advantages of this approach. However,  moving from a plan driven culture to agile development is not easy.  Making the transition requires changes to many established practices and  may even touch core values held by stakeholders. Areas affected are  requirements and change management, user involvement, willingness to  take on responsibility, contract management, and the ability to live  with many uncertainties. This talk looks at what it takes to make the  transition and presents lessons learned from organizations and projects  which have successfully completed the switch to agile development.},
    keywords={agile development methods; human factors in changing development practices},
    isbn={1-58113-963-2},
    url={http://doi.acm.org/10.1145/1062455.1062472}
}

@inproceedings{RefWorks:59,
    author={Michael Hirsch},
    year={2002},
    title={Making RUP agile},
    booktitle={OOPSLA 2002 Practitioners Reports},
    series={OOPSLA '02},
    publisher={ACM},
    address={New York, NY, USA},
    location={Seattle, Washington},
    pages={1-ff},
    abstract={The Unified Development Process (USDP) and especially its implementation  by Rational Software Corporation, the Rational Unified Process (RUP),  is a comprehensive process covering almost all aspects of software  development projects. However, due to the great level of detail provided  by RUP, many professionals do not consider RUP practical for small,  fast paced projects. This paper reports the experiences with RUP on two  small projects with teams of 3 to 5 developers. RUP proved to be  adaptable to the needs of small projects and was very effective in both  projects. One key to the successful application of RUP in small projects  is the careful selection of a proper subset of artifacts and keeping  these artifacts very concise and free from unnecessary formalism. This  paper goes into the details of what it takes to make RUP agile, how it  was applied in the two projects, and how it was configured. Also covered  is what elements of RUP contributed to the success of one project, and  why RUP could not prevent that the outcome of the other project was less  than optimal.},
    isbn={1-58113-471-1},
    url={http://doi.acm.org/10.1145/604251.604254}
}

@inproceedings{RefWorks:28,
    author={K. R. Howard},
    year={2009},
    title={The covert agilist},
    organization={Affiliation: Improving Enterprises, Dallas, TX, United States},
    pages={131-134},
    abstract={A team of consultants introduces Agile software development practices in an "Agile Hostile" environment. This paper describes the chain of events that allowed them to covertly introduce and exercise Agile practices. There were three distinctly different coaching approaches at play, and it was the combination of the three that resulted in successes. Enterprise change requires more than a single win, however, and lack of top-down support prevented wider scale adoption of Agile practices.}
}

@inproceedings{RefWorks:123,
    author={P. Ingalls and T. Frever},
    year={2009},
    title={Growing an Agile Culture from Value Seeds},
    booktitle={Agile Conference, 2009. AGILE '09.},
    pages={119-124},
    note={ID: 2},
    abstract={Values can be powerful forces when applied to a small company. From their seed personalized practices are grown. By starting with agile values and then making them your own, you can instill a creative force for change and adaptation, a necessary ingredient for success. Traditional agile practices become personalized through iterative improvement measured against these values. Different teams can create new practices that are applicable to their disciplines. Most importantly, values defined at the outset can frame every conversation and decision, growing a culture oriented towards rapid execution and shared vision.}
}

@inproceedings{RefWorks:26,
    author={M. Kalliney},
    year={2009},
    title={Transitioning from agile development to enterprise product management agility},
    organization={Affiliation: Ultimate Software, Fort Lauderdale, FL, United States},
    pages={209-213},
    abstract={By now, your company has made the transition to Scrum. "Sprints", "backlogs", and "retrospectives" are everyday words, but you have discovered the complications that arise within Product Management. Product Owners and Managers who have been scattered across multiple teams are no longer in sync, and at the senior management level, there is not very much visibility into what the Scrum teams are working on unless backlogs are scrutinized. Even then, it is difficult to connect the user stories to management's high level goals. In addition, cross-product dependencies are not being effectively recognized and managed. The necessity of tracing high level business objectives and portfolio initiatives down to the user story level is essential to any high performing agile development organization. This experience report details how Ultimate Software has successfully transitioned from agile development to an agile enterprise.}
}

@inproceedings{RefWorks:118,
    author={P. T. Kidd},
    year={1997},
    title={Agile enterprise strategy: a next generation manufacturing concept},
    booktitle={Agile Manufacturing (Digest No. 1997/386), IEE Colloquium on},
    pages={2/1-2/6},
    note={ID: 5},
    abstract={Agility as a subject is still a developing area. Companies are starting to move towards agile behaviour, but as the move is often unplanned it tends to be operational and to lack strategic direction. As a first step, companies need to understand the basic ideas and become intelligent respondents to the concepts. Agility is a long term issue for businesses; achieving agility is a journey, not an objective to be attained before moving on to something else. Although embryonic examples of agility can now be found in industry, the implementation of agility is still very much a frontier activity, involving radically new concepts concerning strategies, organisation, people and technologies. It takes businesses into a domain where fundamental and taken for granted assumptions are challenged. Agility is a paradigm shift and before one can move forwards one has to understand the existing paradigm and to face up to the often painful task of accepting that current practices and beliefs are no longer appropriate or relevant. This in itself, is a major change exercise, but one that is vital to the successful development of agile capabilities}
}

@techreport{RefWorks:46,
    author={B. A. Kitchenham},
    year={2004},
    title={Procedures for Performing Systematic Reviews},
    institution={Keele University Technical Report},
    type={Technical report},
    number={TR/SE-0401},
    isbn={1353-7776}
}

@inproceedings{RefWorks:140,
    author={H. Koehnemann and M. Coats},
    year={2009},
    title={Experiences Applying Agile Practices to Large Systems},
    booktitle={Agile Conference, 2009. AGILE '09.},
    pages={295-300},
    note={ID: 1},
    abstract={Literature has credited agile development practices with saving failing projects and helping with the success of many others. The projects of many agile success stories have similar characteristics - small teams, co-located, relatively free of reporting and governance constraints, etc. This paper presents experiences applying agile practices to large systems projects. The information was gathered from multiple large projects and covers practices that scaled successfully as well as those that did not. We present agile development practices, the value they bring to both developers and business, and based on our experience, which practices successfully scale to large systems.}
}

@book{RefWorks:34,
    author={K. Korhonen},
    year={2009},
    title={Migrating defect management from waterfall to agile software development in a large-scale multi-site organization: A case study},
    volume={31 LNBIP},
    pages={73-82},
    note={Cited By (since 1996): 1},
    abstract={Defect management practices are considered an important part of traditional software development. While embracing agile methods, software development organizations have realized that defects still do exist and they must be managed. Therefore defect management practices should be migrated as well, but current instructions for such a change are fragmented or incomplete. We studied three software development organizations to find out what are the main problems to consider in defect management when migrating from waterfall to agile. We identified five issues related to process, tools and metrics in a multi-site organization. This paper proposes action items to deal with these issues during the agile migration planning activities. © 2009 Springer Berlin Heidelberg.},
    keywords={agile adoption; Defect management; distributed development}
}

@inproceedings{RefWorks:29,
    author={O. Ktata and G. Lévesque},
    year={2009},
    title={Agile development: Issues and avenues requiring a substantial enhancement of the business perspective in large projects},
    organization={Affiliation: University of Québec at Montréal, 201, avenue du Président-Kennedy, Montréal, QC, Canada},
    pages={59-66},
    note={Cited By (since 1996): 1},
    abstract={Large-scale projects, are often delivering low value software to businesses due to stakeholders' misunderstanding. Evolutionary software development represents an alternative to plan-driven development in order to tackle today's turbulent environments. In agile development, a type of evolutionary development, the product owner (P.O.) who is the customer representative- real accountable role- is ill-equipped to identify and prioritize the stakeholders' most success-critical expectations and potential sources of business value. Furthermore, the tools he can use have their own scalability issues that question their underlying principles. Moreover, without a substantial involvement to take into account all stakeholders, software providers are more likely acting as commodity-utility providers than real business partners. In today's business context, there is a clear need for a value-driven development which embraces changes along with higher visibility and understanding of business transformations. Copyright © 2009 ACM.},
    keywords={Agile development; Decision making; Goal oriented approaches; Project management; Requirements engineering; Scrum and business modeling; Software valuation}
}

@inproceedings{RefWorks:121,
    author={Kuo-Wei Hwang},
    year={2010},
    title={Information-Led Transformation of Regional Chinese Enterprises},
    booktitle={Service Oriented System Engineering (SOSE), 2010 Fifth IEEE International Symposium on},
    pages={3-3},
    note={ID: 1},
    abstract={[Summary form only given]. Regional enterprises in fast growth emerging markets such as China are increasingly leveraging advanced information technology to grow their business. As they expand these institutions are accelerating their IT modernization efforts to transform their business models, automate and re-engineer business processes, increase agility, efficiency and resiliency while mitigate risks under volatile market conditions. In this talk we review how service orientation, cloud computing, and other advanced information management solutions are helping these regional institutions in their transformation. Case studies drawn from a number of Chinese companies will be used to illustrate process re-engineering and optimization approaches, architecture best practices, lessons learned, and to shed lights on potential areas for future research and development.}
}

@inproceedings{RefWorks:4,
    author={R. Kuusela and M. Koivuluoma},
    year={2011},
    title={Lean transformation framework for software intensive companies: Responding to challenges created by the cloud},
    organization={Affiliation: VTT Technical Research Centre of Finland, Oulu, Finland; Affiliation: University of Oulu, Oulu, Finland},
    pages={378-382},
    abstract={Today, the cloud phenomenon is challenging companies' business and revenue models. Many enterprises are starting a fundamental change in order to benefit from the opportunities and to respond to the challenges that the cloud brings. At the same time, interest in lean thinking has grown in industries and research communities. Lean paradigm is assessed as a potential means to help companies pursue efficiency. This paper builds on premise that in order to succeed, software intensive enterprise's cloud transformation should have lean thinking woven in - we talk about lean transformation. This paper extends the current available lean related literature that, however, is mainly intended to manufacturing industries. This paper proposes a lean transformation framework, which highlights the significance of learning, iterative execution and holistic approach involving the whole enterprise in the transformation. First experiences of using the proposed lean transformation framework in a large IT service company are described as well. © 2011 IEEE.},
    keywords={Cloud Phenomenon; Lean Paradigm; Transformation}
}

@inproceedings{RefWorks:39,
    author={M. Laanti},
    year={2008},
    title={Implementing program model with agile principles in a large software development organization},
    organization={Affiliation: Nokia Corporation},
    pages={1383-1391},
    note={Cited By (since 1996): 3},
    abstract={Organizations developing software have increasing interest towards deployment of agile methods. However, there is a problem in scaling up scrum and other agile methods, since these were originally meant for individual team scope. It is not enough to deploy agile methods only on the team level - because of the dependencies that teams have between each other when developing large software systems, and because the software engineering teams need input for their decision making (or actual decisions) and need to be synchronized with other activities. We present one way of scaling up scrum to program level consisting of several scrum teams, concentrating on the changes done in the process front-end. We also describe a new artifact called Agile Policy that was created for large-scale agile deployment. © 2008 IEEE.}
}

@article{RefWorks:15,
    author={M. Laanti and O. Salo and P. Abrahamsson},
    year={2011},
    title={Agile methods rapidly replacing traditional methods at Nokia: A survey of opinions on agile transformation},
    journal={Information and Software Technology},
    volume={53},
    number={3},
    pages={276-290},
    note={Cited By (since 1996): 4},
    abstract={Context: Many organizations have started to deploy agile methods, but so far there exist only a few studies on organization-wide transformations. Are agile methods here to stay? Some claim that agile software development methods are in the mainstream adoption phase in the software industry, while others hope that those are a passing fad. The assumption here is that if agile would not provide real improvement, adopters would be eager at first but turn pessimistic after putting it into practice. Objective: Despite the growing amount of anecdotal evidence on the success of agile methods across a wide range of different real-life development settings, scientific studies remain scarce. Even less is known about the perception of the impacts of agile transformation when it is deployed in a very large software development environment, and whether agile methods are here to stay. This study aims to fill that gap by providing evidence from a large-scale agile transformation within Nokia. While we have yet to confirm these findings with solid quantitative data, we believe that the perception of the impacts already pinpoints the direction of the impacts of large-scale agile transformation. Method: The data were collected using a questionnaire. The population of the study contains more than 1000 respondents in seven different countries in Europe, North America, and Asia. Results: The results reveal that most respondents agree on all accounts with the generally claimed benefits of agile methods. These benefits include higher satisfaction, a feeling of effectiveness, increased quality and transparency, increased autonomy and happiness, and earlier detection of defects. Finally, 60% of respondents would not like to return to the old way of working. Conclusion: While the perception of the impact of agile methods is predominantly positive, several challenge areas were discovered. However, based on this study, agile methods are here to stay. © 2010 Elsevier B.V. All rights reserved.},
    keywords={Agile deployment; Agile software development; Software engineering; Software processes}
}

@inproceedings{RefWorks:97,
    author={E. C. Lee},
    year={2008},
    title={Forming to Performing: Transitioning Large-Scale Project Into Agile},
    booktitle={Agile, 2008. AGILE '08. Conference},
    pages={106-111},
    note={ID: 5},
    abstract={This experience report discusses a large scale team transitioning from waterfall to Agile while going through all phases of Tuckman's model. I describe the issues we encountered, lessons we learned, and how we coped with difficult situations in each of the four phases of the Tuckman's model of team development.}
}

@inproceedings{RefWorks:57,
    author={Ilkka Lehto and Kristian Rautiainen},
    year={2009},
    title={Software development governance challenges of a middle-sized company in agile transition},
    booktitle={Proceedings of the 2009 ICSE Workshop on Software Development Governance},
    series={SDG '09},
    publisher={IEEE Computer Society},
    address={Washington, DC, USA},
    pages={36-39},
    abstract={We studied how a middle-sized Finnish company employing agile methods  governs its software product development. Through observations and  interviews we followed the trace from strategic plans in the form of  roadmaps to various backlogs and all the way to daily work. The  governance roles, responsibilities and deliverables seemed to be in  place on different organizational levels. However, closer inspection  revealed challenges in the practical implementation. There were too many  roles and hierarchy levels with information consistency problems in  between. Prioritization of the high-level goals was unclear and made it  difficult to plan and organize development work based on business value.  The trace from high-level goals to more detailed plans was easily  corrupted due to poor planning practices. Progress monitoring of daily  work was poorly done and not linked to high-level plans. Consequently,  the required feedback loops were inadequate, making it impossible for  management to take corrective actions in time.},
    isbn={978-1-4244-3736-8},
    url={http://dx.doi.org/10.1109/SDG.2009.5071335}
}

@inproceedings{RefWorks:63,
    author={Jingyue Li and Nils B. Moe and Dyb\aa Tore},
    year={2010},
    title={Transition from a plan-driven process to Scrum: a longitudinal case study on software quality},
    booktitle={Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
    series={ESEM '10},
    publisher={ACM},
    address={New York, NY, USA},
    location={Bolzano-Bozen, Italy},
    pages={13:1-13:10},
    abstract={Although Scrum is an important topic in software engineering and  information systems, few longitudinal industrial studies have  investigated the effects of Scrum on software quality, in terms of  defects and defect density, and the quality assurance process. In this  paper we report on a longitudinal study in which we have followed a  project over a three-year period. We compared software quality assurance  processes and software defects of the project between a 17-month phase  with a plan-driven process, followed by a 20-month phase with Scrum. The  results of the study did not show a significant reduction of defect  densities or changes of defect profiles after Scrum was used. However,  the iterative nature of Scrum resulted in constant system and acceptance  testing and related defect fixing, which made the development process  more efficient in terms of fewer surprises and better control of  software quality and release date. In addition, software quality and  knowledge sharing got more focus when using Scrum. However, Scrum put  more stress and time pressure on the developers, and made them reluctant  to perform certain tasks for later maintenance, such as refactoring.},
    keywords={agile software development; empirical software engineering; software quality},
    isbn={978-1-4503-0039-1},
    url={http://doi.acm.org/10.1145/1852786.1852804}
}

@inproceedings{RefWorks:69,
    author={Lech Madeyski and Wojciech Biela},
    year={2007},
    title={Empirical evidence principle and joint engagement practice to introduce XP},
    booktitle={Proceedings of the 8th international conference on Agile processes in software engineering and extreme programming},
    series={XP'07},
    publisher={Springer-Verlag},
    address={Berlin, Heidelberg},
    location={Como, Italy},
    pages={141-144},
    abstract={Bringing software process change to an organisation is a real challenge.  The authors have shown a sample attempt to carry out a process change  and then reflected on its results and context. The present reflection  points to a need for a set of principles and practices that would  support the fragile process of introducing agility. For a start, the  authors propose the Empirical Evidence principle exemplified using DICE®  and the practice of Joint Engagement of the management and the  developers. Both are results of a real-world process change case study  in Poland.},
    isbn={978-3-540-73100-9},
    url={http://dl.acm.org/citation.cfm?id=1768961.1768985}
}

@inproceedings{RefWorks:66,
    author={Rafael P. Maranzato and Marden Neubert and Paula Herculano},
    year={2011},
    title={Moving back to scrum and scaling to scrum of scrums in less than one year},
    booktitle={Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion},
    series={SPLASH '11},
    publisher={ACM},
    address={New York, NY, USA},
    location={Portland, Oregon, USA},
    pages={125-130},
    abstract={We report on the experience of re-introducing Scrum in a project team  that had previously failed to adopt that agile method. We explore the  reasons we believe that caused the failure and explain how we approached  the team to uncover them. Then, we describe our strategy to avoid  incurring in those problems again and to take the team to a higher level  of productivity, quality and personal satisfaction. We also present the  motivation and the actions taken to go further and scale this scenario  to multiple feature-oriented teams using Scrum of Scrums. All these  changes occurred in less than one year.},
    keywords={agile; cultural change; experience; scaling scrum; scrum; scrum of scrums},
    isbn={978-1-4503-0942-4},
    url={http://doi.acm.org/10.1145/2048147.2048186}
}

@inproceedings{RefWorks:115,
    author={L. Meade and A. Presley},
    year={1996},
    title={Tools for engineering the agile enterprise},
    booktitle={Engineering and Technology Management, 1996. IEMC 96. Proceedings., International Conference on},
    pages={381-385},
    note={ID: 2},
    abstract={This paper describes the work of the Automation & Robotics Research Institute which has as its objectives the development of a set of business process templates and enterprise design methodologies for transforming enterprises to agility and forming virtual enterprises. Business processes in three categories are studied: those processes which transform external constraints into internal constraints; those processes which acquire and prepare resources; and those processes which use resources to produce enterprise results. Research in business process templates as well as supporting methodologies in three areas is being conducted: metric development, strategic justification, and agile business process configuration. This paper presents issues related to engineering the enterprise, relevant research results accomplished to date, and implications for future research}
}

@inproceedings{RefWorks:141,
    author={A. Miller and E. Carter},
    year={2007},
    title={Agility and the Inconceivably Large},
    booktitle={Agile Conference (AGILE), 2007},
    pages={304-308},
    note={ID: 2},
    abstract={This report outlines the experiences of the Microsoft Visual Studio Tools for Office product unit (hereafter referred to as "product unit") as it applied agile principles and practices while developing features for one of the largest commercially available pieces of software in the world, Microsoft's Visual Studioreg development system. Scaling agile to very large projects has proven challenging because of the escalating coordination requirements between many small teams. The product unit used the feature crew model to decouple individual teams within the project. This allowed teams to operate in a more agile manner while still participating in a much larger undertaking.}
}

@inproceedings{RefWorks:142,
    author={E. Moore},
    year={2009},
    title={Influence of Large-Scale Organization Structures on Leadership Behaviors},
    booktitle={Agile Conference, 2009. AGILE '09.},
    pages={309-313},
    note={ID: 1},
    abstract={In a large agile organization (more than three teams or 30 team members) with self-organized empowered teams, R&D leadership roles are still needed to support teams through topics including resource management and strategic vision. This experience report will highlight these R&D leadership roles, describe flat, hierarchical, and matrix R&D organization structures, and then illustrate the influence of these organizational structures on key leaderships behaviors for an agile environment. These behaviors include leading versus managing, flexing existing team boundaries, driving both team and project success, and balancing team versus individual needs. The report concludes that while some organizations structures are more supportive in an agile environment, the organization structure is less important than identifying leaders who demonstrate those key leadership behaviors.}
}

@book{RefWorks:8,
    author={M. Neubauer and C. Stary},
    year={2011},
    title={Situatedness - The Amalgam of Agile (S-)BPM},
    volume={213 CCIS},
    pages={65-79},
    abstract={Process development has become vital for enterprises operating in an increasingly dynamic business environment. As business process models represent boundary objects between technology and business operations they need not only be able to capture all essential information required for executing business processes, but also for the situational context of agile Business Process Management (BPM). Of particular interest are aspects such as: What is triggering changes? What are the targets of an organizational move? Which impact could it have on the business operation? Although several categories of BPM approaches have been established, the situational context of organizational change has only been tackled rudimentary on the level of representational requirements. In this contribution we discuss existing concepts to represent situations and their capability to support the modification of business operations on-the-fly. Furthermore, we exemplify an integrated representation approach enabling situated subject-oriented BPM. © 2011 Springer-Verlag.},
    keywords={Situation awareness; Situation Theory; Subject-oriented Business Process Management (S-BPM)}
}

@inproceedings{RefWorks:40,
    author={J. Nielsen and D. McMunn},
    year={2005},
    title={The agile journey -Adopting XP in a large financial services organization},
    organization={Affiliation: Digital Focus, 13655 Dulles Technology Drive, Herndon, VA 20171, United States},
    volume={3556},
    pages={28-37},
    abstract={On January 14, 2004, two vice presidents met with a group of directors, project managers, and developers, and indicated their desire to embrace agile software development as "the way forward" in their organization. This was not the beginning of this company's adoption of XP and Agile Methodologies, but rather the culmination of almost two and a half years of learning, experimentation, prototyping, and promotion. Making change "stick" in any large organization is problematic, and dramatically changing the way a risk-averse, highly-regulated company develops software requires more than just a successful pilot and a couple of months of coaching. This experience report documents the "agile journey" undertaken by one such corporation between 2001 and 2004. They began by outsourcing a small effort to an XP-proficient consulting firm, and proceeded to use agile techniques on a series of increasingly-significant efforts, allowing sufficient time for the new approach to gain acceptance. In retrospect, all parties involved now believe that the slow, gradual approach to XP adoption - building on incremental successes project by project - was the key to its success. © Springer-Verlag Berlin Heidelberg 2005.}
}

@inproceedings{RefWorks:70,
    author={Natalja Nikitina and Mira Kajko-Mattsson},
    year={2011},
    title={Developer-driven big-bang process transition from Scrum to Kanban},
    booktitle={Proceedings of the 2011 International Conference on Software and Systems Process},
    series={ICSSP '11},
    publisher={ACM},
    address={New York, NY, USA},
    location={Waikiki, Honolulu, HI, USA},
    pages={159-168},
    abstract={Even if most of the software process transitions have been made with the  goal of improving software processes, only few experience reports  recognize process transition as an important element of software process  improvement. This paper reports on a developer-driven Big-Bang process  transition from Scrum to Kanban, and recognizes it as part of process  improvement effort in one software development company. The paper  reports on the transition process, changes done to the process and  results achieved. It rounds up with an initial model of a process  transition, lessons learned from the process transition effort and  suggestions for future work.},
    keywords={case study; process transition; software process improvement},
    isbn={978-1-4503-0730-7},
    url={http://doi.acm.org/10.1145/1987875.1987901}
}

@inproceedings{RefWorks:50,
    author={James Noble and Stuart Marshall and Stephen Marshall and Robert Biddle},
    year={2004},
    title={Less Extreme Programming},
    booktitle={Proceedings of the Sixth Australasian Conference on Computing Education - Volume 30},
    series={ACE '04},
    publisher={Australian Computer Society, Inc},
    address={Darlinghurst, Australia, Australia},
    location={Dunedin, New Zealand},
    pages={217-226},
    abstract={Industrial practice in software engineering has developed in recent  years from rigid heavyweight document-based development techniques, such  as the Rational Unified Process, to incorporate more agile, iterative,  communication-centric approaches such as Extreme Programming. This shift  has created a need for a similar shift in software engineering  education. We report our experience of incorporating an Extreme  Programming option into an existing document-centric software project  course. While students taking the option were generally positive about  Extreme Programming, the projects' external clients had a more mixed  experience.},
    keywords={Extreme Programming; project work; software engineering},
    url={http://dl.acm.org/citation.cfm?id=979968.979997}
}

@article{RefWorks:116,
    author={K. Nottonson and K. DeLong},
    year={2008},
    title={Baby Steps: Agile Transformation at BabyCenter.com},
    journal={IT Professional},
    volume={10},
    number={5},
    pages={59-62},
    note={ID: 3},
    abstract={The authors describe BabyCenter.com's four-year journey from chaos to a relatively mature agile organization. From engineering teams tasked with more projects than developers, delivery dates set long before projects were scoped or staffed, and multitudinous business stakeholders deluging team members with new project requests, each more urgent than the previous, the team evolved into scrum sprints with predictable, steady paces and a comprehensive planning process wrapping the sprints.},
    keywords={Web sites; social sciences computing; BabyCenter.com; agile organization; comprehensive planning process; multitudinous business stakeholders; project requests},
    isbn={1520-9202}
}

@inproceedings{RefWorks:47,
    author={Christopher P. O'Connor},
    year={2010},
    title={Letters from the edge of an agile transition},
    booktitle={Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion},
    series={SPLASH '10},
    publisher={ACM},
    address={New York, NY, USA},
    location={Reno/Tahoe, Nevada, USA},
    pages={79-84},
    abstract={Starting as a new coach of a team with almost no agile experience and an  enormous release pending was quite daunting. Change was slow and at  first it seemed like we would not succeed in converting the team and  delivering the product. It took patience, support at many different  levels of the organization, and hard work from many different people to  put this team on the path to becoming a functional and productive agile  team. Now the team is growing as a successful and productive agile team.  I am proud to have been a part of going from mostly offshore waterfall  development to a local agile development team; from one release in about  a year and a half to an average of one release per week; from over a  hundred open issues to dozens and falling.},
    keywords={XP; agile; scrum},
    isbn={978-1-4503-0240-1},
    url={http://doi.acm.org/10.1145/1869542.1869557}
}

@inproceedings{RefWorks:110,
    author={M. Paasivaara},
    year={2011},
    title={Coaching Global Software Development Projects},
    booktitle={Global Software Engineering (ICGSE), 2011 6th IEEE International Conference on},
    pages={84-93},
    note={ID: 1},
    abstract={This paper presents a multiple-case study on how three globally distributed software development projects from a large Scandinavia-based IT organization introduced agile practices with the help of a company internal coaching team. The data was gathered by ten semi-structured interviews: we interviewed four coaches and six persons from the coached projects. We describe how the coaches cooperated with the case projects, helping them to adopt agile practices. We present the challenges the projects faced, as well as the benefits they gained. Our results show that when coaching globally distributed projects it is especially important to gain executive support from all the sites, to involve all sites in the change process, to build a common vision in a collaborative workshop, to invite coaches as early as possible, to aim for a long-term coaching relationship, and to remember that the project team owns the change, coaches are there just to support the team.}
}

@inproceedings{RefWorks:144,
    author={M. Paasivaara and S. Durasiewicz and C. Lassenius},
    year={2008},
    title={Distributed Agile Development: Using Scrum in a Large Project},
    booktitle={Global Software Engineering, 2008. ICGSE 2008. IEEE International Conference on},
    pages={87-95},
    note={ID: 1},
    abstract={While seemingly incompatible, combining large-scale global software development and agile practices is a challenge undertaken by many companies. Case study reports on the successful use of agile practices in small distributed projects already exist. How these practices could be applied to larger projects, however, remains unstudied. This paper reports a case study on agile practices in a 40- person development organization distributed between Norway and Malaysia. Based on seven interviews in the development organization, we describe how Scrum practices were successfully applied, e.g., using teleconference and Web cameras for daily scrum meetings, synchronized 4- week sprints and weekly scrum-of-scrums. Additional agility supporting practices for distributed projects were identified, e.g., frequent visits, unofficial distributed meetings and annual gatherings are described.}
}

@inproceedings{RefWorks:145,
    author={M. Paasivaara and C. Lassenius},
    year={2011},
    title={Scaling Scrum in a Large Distributed Project},
    booktitle={Empirical Software Engineering and Measurement (ESEM), 2011 International Symposium on},
    pages={363-367},
    note={ID: 2},
    abstract={This paper presents a currently ongoing single case study on adopting and scaling Scrum in a large software development project distributed across four sites. The data was gathered by 19 semi-structured interviews of project personnel, including managers, architects, developers and testers. At the time of the interviews the project had grown in size during the past 2,5 years from two collocated Scrum teams to 20 teams located in four countries and employing over 170 persons. In this paper we first describe our research approach and goals. Then we briefly summarize the preliminary results of this ongoing study: we explain how Scrum practices were scaled, as well as discuss the successes and challenges experienced when adopting the agile practices and scaling them, while at the same time growing the project size at a fast pace. Even though this project has been very successful from the business point of view, it has experienced a lot of problems in applying Scrum, especially related to scaling the agile practices. Thus, it seems that adapting Scrum practices to work well in a large distributed setting is challenging.},
    isbn={1938-6451}
}

@inproceedings{RefWorks:88,
    author={J. Packlick},
    year={2007},
    title={The Agile Maturity Map A Goal Oriented Approach to Agile Improvement},
    booktitle={Agile Conference (AGILE), 2007},
    pages={266-271},
    note={ID: 15},
    abstract={Fulfilling the potential of agile development depends on people truly wanting to change how they work. Transitioning to new methods of development is particularly daunting in a large organization that already has a sizeable existing code base and a broad set of existing customers. In our experience, development teams tend to reach a plateau implementing a subset of agile practices, and those tend to be generally focused on the planning and iterative aspects of agile. This paper describes our experience in overcoming the barriers to increasing the adoption of agile practices. Drawing from agile principles, we have developed an approach for improvement that enables teams to accelerate change, deepen their degree of understanding, and increase their success in execution. We have found this helps teams to overcome the plateau effect.}
}

@article{RefWorks:65,
    author={Damon Poole},
    year={2006},
    month={oct},
    title={Breaking the Major Release Habit},
    journal={Queue},
    volume={4},
    number={8},
    pages={46-51},
    abstract={Can agile development make your team more productive?
  Keeping up with the rapid pace of change can be a daunting task.  Just as you finally get your software working with a new technology  to meet yesterday's requirements, a newer technology is introduced  or a new business trend comes along to upset the apple cart.  Whether your new challenge is Web services, SOA (service-oriented  architecture), ESB (enterprise service bus), AJAX, Linux, the  Sarbanes-Oxley Act, distributed development, outsourcing, or  competitive pressure, there is an increasing need for development  methodologies that help to shorten the development cycle time,  respond to user needs faster, and increase quality all at the same  time.},
    isbn={1542-7730},
    url={http://doi.acm.org/10.1145/1165754.1165768}
}

@article{RefWorks:54,
    author={Vaclav Rajlich},
    year={2006},
    month={aug},
    title={Changing the paradigm of software engineering},
    journal={Commun.ACM},
    volume={49},
    number={8},
    pages={67-70},
    abstract={Software evolution, iterative, and agile development represent a  fundamental departure from the previous waterfall-based paradigm of  software engineering.},
    isbn={0001-0782},
    url={http://doi.acm.org/10.1145/1145287.1145289}
}

@inproceedings{RefWorks:82,
    author={A. Read and R. O. Briggs},
    year={2012},
    title={The Many Lives of an Agile Story: Design Processes, Design Products, and Understandings in a Large-Scale Agile Development Project},
    booktitle={System Science (HICSS), 2012 45th Hawaii International Conference on},
    pages={5319-5328},
    note={ID: 9},
    abstract={In Agile Software Development (ASD), stakeholders use stories to stimulate conversations that create and convey understanding of software requirements. Some authors have argued that ASD methods have limited applicability to large-scale projects because agile stories are not sufficient to capture the complexities of up-front design. This paper reports a 2.5-year field study of how an ASD team for a complex software system adapted the user story concept and the Scrum approach. The team sought to create a convention for representing agile stories which could capture the complexities of the system requirements without burdening the team with unneeded documentation. They developed eight different ways to represent a story. The core representation of the approach was called a HyperEpic, a structured collection of closely-related HyperStories. HyperEpics required 90-99% fewer words than conventional specifications. Because of their dense form, Hyper-epics were not useful for other phases in the design/build processes. The team evolved a design/build work practice that proceeded in stages. In each stage, stories underwent a one or more transformations. Each transformation represented stories differently to create varied kinds of understandings among different stakeholder sets. The team was able to gain the benefits of ASD - faster development cycles, less documentation, rapid adaptation to insights and conditions.},
    isbn={1530-1605}
}

@article{RefWorks:136,
    author={D. J. Reifer and F. Maurer and H. Erdogmus},
    year={2003},
    title={Scaling agile methods},
    journal={Software, IEEE},
    volume={20},
    number={4},
    pages={12-14},
    note={ID: 1},
    abstract={Using agile methods to develop large systems presents a thorny set of issues. If large teams are to produce lots of software functionality quickly, the agile methods involved must scale to meet the task. After all, a small team could create the software if the functionality to be delivered was small and, conversely, could be delivered given we had the time. Scaling agile teams thus becomes an issue if the only option for meeting a system delivery deadline is to have many developers working concurrently.},
    keywords={project management; software development management; scale agile methods; software development; software functionality},
    isbn={0740-7459}
}

@article{RefWorks:112,
    author={R. S. Sangwan and P. A. Laplante},
    year={2006},
    title={Test-Driven Development in Large Projects},
    journal={IT Professional},
    volume={8},
    number={5},
    pages={25-29},
    note={ID: 3},
    abstract={Test-driven development (TDD) is a key practice for agile developers because it involves writing test cases ahead of the code, which can improve design. The TDD process works well for projects in which a collocated team develops a small to medium system, but it can be challenging for large systems, especially those involving geographically distributed teams. The main obstacle is the degree of integration: when the team must integrate many individual classes developed at distributed sites, the coordination and communication grows exponentially with the number of individual developers and sites. This does not mean that TDD is ineffective for large-scale geographically distributed projects, but developers must take care to account for its focus on unit testing and its failure to rigorously address communications issues during system and integration testing. In this article, suggestions to scale up TDD are presented with two large-scale global software development projects at a major corporation and a recent meeting to exchange global software development best practices with a Fortune 500 company},
    keywords={management of change; program testing; project management; software development management; software fault tolerance; change management; fault tolerance; geographically distributed teams; integration testing; large-scale global software development projects; notification tools; test-driven development},
    isbn={1520-9202}
}

@article{RefWorks:41,
    author={B. Schatz and I. Abdelshafi},
    year={2005},
    title={Primavera gets Agile: A successful transition to Agile development},
    journal={IEEE Software},
    volume={22},
    number={3},
    pages={36-42},
    note={Cited By (since 1996): 32},
    abstract={Primavera Systems, vendor for enterprise project management software, reports on adopting the Scrum agile developments process. The changes made helped the company start delivering higher-quality software while improving the development team's quality of life. Today, Primavera's development team is a model for other companies looking to adopt agile processes. © 2005 IEEE.}
}

@inproceedings{RefWorks:19,
    author={J. Schnitter and O. MacKert},
    year={2010},
    title={Introducing agile software development at SAP AG: Change procedures and observations in a global software company},
    organization={Affiliation: SAP AG, Dietmar-Hopp-Allee 16, 69190 Walldorf, Germany},
    pages={132-138},
    note={Cited By (since 1996): 1},
    abstract={This paper describes the change process that is taking place at SAP AG to move the software development processes from a waterfall-like approach to agile methodologies. This change affects about 18,000 developers working at 12 global locations. The paper outlines the procedure to introduce Scrum as an implementation of lean development, and the model chosen to scale Scrum up to large product development projects. The most important observations are described, and an outlook on future improvement is given.},
    keywords={Agile project management; Large-scale scrum; Lean development; Scrum}
}

@inproceedings{RefWorks:117,
    author={Amir Shatil and Orit Hazzan and Yael Dubinsky},
    year={2010},
    title={Agility in a Large-Scale System Engineering Project: A Case-Study of an Advanced Communication System Project},
    booktitle={Software Science, Technology and Engineering (SWSTE), 2010 IEEE International Conference on},
    pages={47-54},
    note={ID: 4},
    abstract={In this paper we describe the application of the agile software development approach in system engineering projects. We describe the main characteristics of system projects, highlighting the challenges that the application of agility in such cases raises. Such challenges emerge due to the unique characteristics of system projects, which include the multidisciplinary nature of such projects, which encompasses, in addition to the software teams, also hardware, firmware, algorithms, and mechanics teams; the significant importance of including the project management in the process; the multiple kinds of integration tasks; the need for high-level and skilled human resources; and finally, the actual software development process, which in many system projects is embedded real-time software. Though agile development is an accepted development methodology in software projects, many questions are still unanswered when agility is applied to system projects. This paper aims to partially close this gap by addressing the application of agility in an advanced communication system project.}
}

@inproceedings{RefWorks:55,
    author={Xueling Shu and Andrei Turinsky and Christoph Sensen and Frank Maurer},
    year={2007},
    title={A case study of the implementation of agile methods in a bioinformatics project},
    booktitle={Proceedings of the 8th international conference on Agile processes in software engineering and extreme programming},
    series={XP'07},
    publisher={Springer-Verlag},
    address={Berlin, Heidelberg},
    location={Como, Italy},
    pages={169-170},
    abstract={From July 2005 to August 2006, a bioinformatics project experienced a  substantial transformation by adopting Scrum and some XP practices. The  paper reveals project risks, previous challenges faced by the team and  results from this one-year exploratory case study. The paper presents a  discussion of the lessons learned from the perspective of both the  project manager and the on-site agile advisor, and recommendations on  speeding up the adoption process for other projects.},
    keywords={agile methods; bioinformatics; java 3D\&\#8482; lessons learned},
    isbn={978-3-540-73100-9},
    url={http://dl.acm.org/citation.cfm?id=1768961.1768997}
}

@inproceedings{RefWorks:3,
    author={L. D. Sienkiewicz and L. A. Maciaszek},
    year={2011},
    title={Adapting scrum for third party services and network organizations},
    organization={Affiliation: Wroclaw University of Economics, Komandorska Street 118/120, 53-345 Wroclaw, Poland},
    pages={329-336},
    abstract={Large number of scientific publications and press releases demonstrate that organizations are adopting the Scrum software development method with success in almost all areas. Nevertheless, traditional Scrum method is not sufficient for managing work in Network Organizations where Third Party Service providers may know nothing about the Scrum. This paper describes the findings of a field study that explores the Scrum in Network Organizations. We extended Scrum core roles and proposed changes in Scrum artifacts that help in adapting the Scrum method to work in Network Organization where changes and high competition are the cornerstone of the entire process. © 2011 Polish Info Processing Soc.}
}

@inproceedings{RefWorks:18,
    author={R. Sindhgatta and N. C. Narendra and B. Sengupta},
    year={2010},
    title={Software evolution in agile development: A case study},
    organization={Affiliation: IBM Research India, Bangalore, India},
    pages={105-114},
    abstract={The agile development method (ADM) is characterized by continuous feedback and change, and a software system developed using ADM evolves continuously through short iterations. Empirical studies on evolution of software following agile development method have been sparse. Most studies on software evolution have been performed on systems built using traditional (waterfall) development methods or using the open source development approach. This paper summarizes our study on the evolution of an enterprise software system following ADM. We evaluated key characteristics of evolution in the light of Lehman's laws of software evolution dealing with continuous change and growth, self-regulation and conservation, increasing complexity and declining quality. Our study indicates that most laws of evolution are followed by the system. We also present our observations on agile practices such as collective code ownership, test driven development and collaboration when the team is distributed. © 2010 ACM.},
    keywords={Agile methods; Evolution; Scrum}
}

@article{RefWorks:128,
    author={Riitta Smeds},
    year={1994},
    title={Managing change towards lean enterprises},
    journal={International Journal of Operations & Production Management},
    volume={14},
    number={3},
    pages={66},
    note={Source type: scholarlyjournals; Object type: Article; Copyright: Copyright MCB University Press Limited 1994; DOCID: 878211; PCID: 44849; PMID: 14900; CODEN: IOPMDU; ProvJournalCode: IJO; AccNum: 00898118; SupplierID: 95-47510},
    abstract={The lean manufacturing principles include the integration of production activities into self-contained units along the production flow. The lean manufacturing system as well as the emerging lean enterprise structures develop towards the simple coordination of the basic business processes in the chain from the suppliers to the customers, as opposed to the existing complex structures of the functionally differentiated hierarchies. An emergent strategy is needed to manage an enterprise's evolution towards a lean enterprise. The management of change framework starts from a strategic vision and an overall umbrella strategy that guide the separate change projects. It then follows in a participative manner through the generic phases: 1. analysis and modeling of the present state, 2. identification of problems and opportunities, 3. experimentation and selection of future state, 4. implementing the change, and 5. stabilizing the new mode of operation. The change management framework contains, as an important method, social simulation games.},
    keywords={2310:Planning; Business And Economics--Management},
    isbn={01443577},
    language={English},
    url={http://search.proquest.com/docview/232333151?accountid=27468}
}

@inproceedings{RefWorks:10,
    author={H. Smits and K. Rilliet},
    year={2011},
    title={Agile experience report: Transition & complexity at Cisco Voice Technology Group},
    organization={Affiliation: Smits Management Consultancy, Boulder, CO, United States; Affiliation: Cisco Systems Voice Technology Group, San Jose, CA, United States},
    pages={274-278},
    abstract={The authors spent six month in the center of the rollout of agile practices in the Cisco Voice Technology organization. The roll-out started earlier, and is continuing after this period, and many more people contributed to the implementation. We learned that following an organizational change pattern (we used Kotter's eight step process i) is helpful to structure the program, and made us aware of where we were, and what needed doing first. We found some issues, and while working on this paper discovered that others have found similar patterns, most notably Linda Rising in her book "Fearless Change" ii. Obstacles we found include the necessity to obtain and maintain support of leadership, the influence of tooling on the implementation, and the need to go step-by-step: get agile skills in teams before attempting to change the full Software Development Life Cycle. We had great results from made-to-measure training of the teams around the globe, from finding a pace-maker process in the development process, and from the support of people who lead actual development programs. © 2011 IEEE.},
    keywords={Agile; Complexity; Implementation; Large-scale; Scrum}
}

@inproceedings{RefWorks:24,
    author={J. Srinivasan and K. Lundqvist},
    year={2010},
    title={Agile in India: Challenges and lessons learned},
    organization={Affiliation: Mälardalen University, Sweden},
    pages={125-130},
    abstract={Indian software organizations have long been early adopters of process improvement as a means of demonstrating organizational capabilities to their global client base. As a result, the development approaches in these organizations are often heavily plan-based, generating structures and processes that are appropriate to those approaches. Agile methods have forced a paradigm change in how we manage and execute software development. Adopting and sustaining agile methods requires organizations to not only manage the radical shift in the operational aspects of software development, but also the soft factors of organizational design such as vision, commitment, culture and training. Using three case studies of organizations that have adopted agile methods in India, we highlight the importance of senior leadership vision, mentoring, and personnel selection in creating an environment that will support successful agile adoption. Furthermore, we highlight the importance of building strong teams, managing customer expectations and driving process excellence as key for successful adoption. Copyright 2010 ACM.},
    keywords={Agile methods; Case study; Outsourcing; Software process improvement}
}

@article{RefWorks:17,
    author={R. Stern},
    year={2011},
    title={Going lean drives business success at E-Z-GO},
    journal={Global Business and Organizational Excellence},
    volume={30},
    number={3},
    pages={15-24},
    abstract={What happens when an aging command-and-control vehicle manufacturer company facing diminishing business embarks on a course guided by lean manufacturing and business processes? For E-Z-GO of Augusta, Georgia, the result was a 200-percent jump in profits in five years and systemwide improvement across all business functions that led the company to earn the first enterprise-level Shingo Prize for Operational Excellence. This article details the continuous improvement roadmap that helped steer the organization on its journey of transformation, the bumps encountered along the way, and the widespread employee engagement designed to power E-Z-GO's efforts toward excellence in the future. © 2011 Wiley Periodicals, Inc.}
}

@inproceedings{RefWorks:56,
    author={Mauro Sulfaro and Michele Marchesi and Sandro Pinna},
    year={2007},
    title={Agile practices in a large organization: the experience of poste Italiane},
    booktitle={Proceedings of the 8th international conference on Agile processes in software engineering and extreme programming},
    series={XP'07},
    publisher={Springer-Verlag},
    address={Berlin, Heidelberg},
    location={Como, Italy},
    pages={219-221},
    abstract={In this paper we show how agile practices have been used at the Poste  Italiane for building a monitoring system of its complex IT  infrastructure. The system, called Datamart, is built upon the existing  monitoring infrastructure. A testing framework has been developed for  performing assertion checking either on existing legacy modules or on  the new functionalities. This framework is currently used, and is able  to process data coming from 100,000 distributed computers, enabling and  improving their centralized control.},
    isbn={978-3-540-73100-9},
    url={http://dl.acm.org/citation.cfm?id=1768961.1769010}
}

@inproceedings{RefWorks:90,
    author={J. Sutherland and R. Frohman},
    year={2011},
    title={Hitting the Wall: What to Do When High Performing Scrum Teams Overwhelm Operations and Infrastructure},
    booktitle={System Sciences (HICSS), 2011 44th Hawaii International Conference on},
    pages={1-6},
    note={ID: 17},
    abstract={All-at-once Scrum implementations require total commitment to change, high level management support and aggressive removal of impediments. Several company-wide implementations are known to the authors but none of them had to deal with the complexity of a large, mission-critical, enterprise software product. Pegasystems develops software to manage, automate and optimize a broad array of business processes. In July of 2009 the company deployed over 20 Scrum teams in the U.S. and India within two months. Complexity of languages, frameworks, and tools led to an architecture where continuous integration support for software development teams was impossible without a major upgrade in infrastructure and operations. A virtual Scrum team was formed to avoid "hitting the wall" before this impediment impacted the first Scrum release of the software. Here we describe how a Scrum team engineered a continuous integration environment for hundreds of software developers on two continents within a few weeks.},
    isbn={1530-1605}
}

@inproceedings{RefWorks:146,
    author={H. Svensson and M. Host},
    year={2005},
    title={Introducing an Agile Process in a Software Maintenance and Evolution Organization},
    booktitle={Software Maintenance and Reengineering, 2005. CSMR 2005. Ninth European Conference on},
    pages={256-264},
    note={ID: 1},
    abstract={The purpose of this paper is to present results of introducing an agile process based on extreme programming, XP, in an evolutionary and maintenance software development environment. The agile process was introduced to a large software development organization. The process was applied by a team during eight months. The conclusions indicate that it in this case is more difficult to introduce XP, in its original appearance, to the case environment than to less complex environments. The complexity of the organization made it necessary to redesign many of the practices in order for them to fit the needs of the software development team.},
    isbn={1534-5351}
}

@inproceedings{RefWorks:53,
    author={David Talby and Yael Dubinsky},
    year={2009},
    title={Governance of an agile software project},
    booktitle={Proceedings of the 2009 ICSE Workshop on Software Development Governance},
    series={SDG '09},
    publisher={IEEE Computer Society},
    address={Washington, DC, USA},
    pages={40-45},
    abstract={Effective governance of agile software teams is challenging but required  to enable wide adoption of agile methodologies, in particular for  large-scale projects. In this paper we apply a full lifecycle governance  model to agile projects, focused on the iteration level. The concept is  demonstrated via a case study of a large-scale, enterprise-critical  software project that implemented agile practices. We analyze three  governance events, including the metrics that triggered the event, the  decisions taken and the followup to ensure resolution. We conclude that  governance iterations can be naturally unified with agile development  iterations, resulting in a lean governance mechanism that identifies and  resolves issues in an effective and timely manner.},
    isbn={978-1-4244-3736-8},
    url={http://dx.doi.org/10.1109/SDG.2009.5071336}
}

@inproceedings{RefWorks:93,
    author={E. Uy and R. Rosendahl},
    year={2008},
    title={Migrating from SharePoint to a Better Scrum Tool},
    booktitle={Agile, 2008. AGILE '08. Conference},
    pages={506-512},
    note={ID: 1},
    abstract={In 2007 the decision to broaden the adoption of Scrum to all development teams forced Kelley Blue Book (KBB) to seek out a more efficient and effective Scrum tool. KBBpsilas use of SharePoint was nascent at the time and was a fine tool for several small Scrum teams. However with the total number of teams now at fifteen, SharePoint alone was just not keeping pace with the needs of the organization. Deciding to move to a more robust tool to promote agility while keeping up with product release plans can be a complicated challenge. KBB chose VersionOne to replace SharePoint. Migration to VersionOne involved numerous departments and two offshore facilities. With KBB sharing their experience of this common situation, other companies can learn about and adopt proven techniques to ensure a successful tool migration. This paper will cover KBBpsilas Scrum implementation, goals of tool migration, the selection process, migration approach, and results.}
}

@inproceedings{RefWorks:36,
    author={R. Valade},
    year={2008},
    title={The big projects always fail: Taking an enterprise agile},
    organization={Affiliation: Entertainment Publications},
    pages={148-153},
    abstract={My overall approach to software development has been to decompose large efforts into smaller, tractable components, and to fail fast when things appear to be heading in the wrong direction. Though not a particularly unusual model, I have been able to road-test it over eight years of agile experience, including a stint at DaimerChrysler on an Extreme Programming (XP) team that included some of the members of the original C3 payroll project. This pattern has been a keystone of our direction at the Technology division of Entertainment Publications, where we began our agile transformation about two years ago. Though it was originally a small pilot with an unspecified roll-out plan, we now use an agile approach for all our software development and support. This paper highlights the lessons we Ve learned in the process - some items for you to either avoid or embrace. © 2008 IEEE.}
}

@article{RefWorks:25,
    author={E. V. Woodward and R. Bowers and V. S. Thio and K. Johnson and M. Srihari and C. J. Bracht},
    year={2010},
    title={Agile methods for software practice transformation},
    journal={IBM Journal of Research and Development},
    volume={54},
    number={2},
    note={Cited By (since 1996): 2},
    abstract={In a large-scale distributed complex software engineering environment, the ability to rapidly evaluate and improve software engineering practices can be a key market differentiator. Practices that shorten the development cycle, cost-effectively improve quality, and align software with customer needs can have a direct impact on the business value delivered by the enterprise. The IBM Quality Software Engineering (QSE) organization motivates and enables teams across IBM business units and geographies to adopt recommended software engineering practices. QSE has historically established communities and used well-known organizational change management principles to help teams adopt and use recommended practices. In 2008 and 2009, QSE discovered that blending well-known organizational change management principles with agile software development principles enables communities to more consistently deliver significant value to their members. QSE Communities use Scrum, which is an agile project management framework, to prioritize their work on the basis of the communities' needs, plan their work every two weeks and then deliver value at the end of every two-week Sprint (iteration), demonstrate results, and obtain feedback and continuously improve by reflecting and identifying improvement actions at the end of each Sprint. Combining Scrum with proven steps to organizational change management has allowed QSE to rapidly motivate and enable software engineering improvements across IBM. © 2010 IBM.}
}

@inproceedings{RefWorks:68,
    author={Carmen Zannier and Frank Maurer},
    year={2007},
    title={Comparing decision making in agile and non-agile software organizations},
    booktitle={Proceedings of the 8th international conference on Agile processes in software engineering and extreme programming},
    series={XP'07},
    publisher={Springer-Verlag},
    address={Berlin, Heidelberg},
    location={Como, Italy},
    pages={1-8},
    abstract={Our ability to improve decision making in software development hinges on  understanding how decisions are made, and which approaches to decision  making are better than others. However, as of yet there are few studies  examining how software developers make decisions in software design,  especially studies that place agile approaches in the context of  decision making. In this paper, we present results of a multi-case study  of design decision making in three software organizations of varying  levels of agility. We show an agile organization produced a culture that  supported communication and debate about alternatives to design  decision more than 2 organizations of lesser agility.},
    keywords={consequential choice; serial evaluation},
    isbn={978-3-540-73100-9},
    url={http://dl.acm.org/citation.cfm?id=1768961.1768963}
}

